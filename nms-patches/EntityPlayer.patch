--- a/net/minecraft/server/EntityPlayer.java
+++ b/net/minecraft/server/EntityPlayer.java
@@ -13,10 +13,31 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import com.google.common.base.Preconditions;
+import org.bukkit.Bukkit;
+import org.bukkit.GameMode;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.event.player.PlayerChangedMainHandEvent;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerGameModeChangeEvent;
+import org.bukkit.event.player.PlayerLocaleChangeEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.inventory.MainHand;
+// CraftBukkit end
+
 public class EntityPlayer extends EntityHuman implements ICrafting {

     @Nullable
     @Override
     public Entity a(DimensionManager dimensionmanager) {
-        this.worldChangeInvuln = true;
+        // CraftBukkit start
+        return a(dimensionmanager, TeleportCause.UNKNOWN);
+    }
+
+    @Nullable
+    public Entity a(DimensionManager dimensionmanager, PlayerTeleportEvent.TeleportCause cause) {
+        // CraftBukkit end
+        if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
+        // this.worldChangeInvuln = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
         DimensionManager dimensionmanager1 = this.dimension;
 
-        if (dimensionmanager1 == DimensionManager.THE_END && dimensionmanager == DimensionManager.OVERWORLD) {
+        if (dimensionmanager1.getType() == DimensionManager.THE_END && dimensionmanager.getType() == DimensionManager.OVERWORLD) { // CraftBukkit - getType()
+            this.worldChangeInvuln = true; // CraftBukkit - Moved down from above
             this.decouple();
             this.getWorldServer().removePlayer(this);
             if (!this.viewingCredits) {
@@ -503,8 +699,10 @@
         } else {
             WorldServer worldserver = this.server.getWorldServer(dimensionmanager1);
 
-            this.dimension = dimensionmanager;
+            // this.dimension = dimensionmanager; // CraftBukkit
             WorldServer worldserver1 = this.server.getWorldServer(dimensionmanager);
+            // CraftBukkit start
+            /*
             WorldData worlddata = worldserver1.getWorldData();
 
             this.playerConnection.sendPacket(new PacketPlayOutRespawn(dimensionmanager, WorldData.c(worlddata.getSeed()), worlddata.getType(), this.playerInteractManager.getGameMode()));
@@ -514,6 +712,8 @@
             playerlist.d(this);
             worldserver.removePlayer(this);
             this.dead = false;
+            */
+            // CraftBukkit end
             double d0 = this.locX();
             double d1 = this.locY();
             double d2 = this.locZ();
@@ -523,6 +723,7 @@
             float f2 = f1;
 
             worldserver.getMethodProfiler().enter("moving");
+            if (worldserver1 == null) { } else // CraftBukkit - empty to fall through to null to event
             if (dimensionmanager1 == DimensionManager.OVERWORLD && dimensionmanager == DimensionManager.NETHER) {
                 this.cr = this.getPositionVector();
                 d0 /= 8.0D;
@@ -540,7 +741,26 @@
                 f = 0.0F;
             }
 
-            this.setPositionRotation(d0, d1, d2, f1, f);
+            // CraftBukkit start
+            Location enter = this.getBukkitEntity().getLocation();
+            Location exit = (worldserver1 == null) ? null : new Location(worldserver1.getWorld(), d0, d1, d2, f1, f);
+            PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause, 128, true, dimensionmanager.getType() == DimensionManager.THE_END ? 0 : 16);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled() || event.getTo() == null) {
+                return null;
+            }
+
+            exit = event.getTo();
+            if (exit == null) {
+                return null;
+            }
+            worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            d0 = exit.getX();
+            d1 = exit.getY();
+            d2 = exit.getZ();
+            // CraftBukkit end
+
+            // this.setPositionRotation(d0, d1, d2, f1, f); // CraftBukkit - PlayerTeleportEvent handles position changes
             worldserver.getMethodProfiler().exit();
             worldserver.getMethodProfiler().enter("placing");
             double d4 = Math.min(-2.9999872E7D, worldserver1.getWorldBorder().c() + 16.0D);
@@ -550,13 +770,19 @@
 
             d0 = MathHelper.a(d0, d4, d6);
             d2 = MathHelper.a(d2, d5, d7);
-            this.setPositionRotation(d0, d1, d2, f1, f);
-            if (dimensionmanager == DimensionManager.THE_END) {
-                int i = MathHelper.floor(this.locX());
-                int j = MathHelper.floor(this.locY()) - 1;
-                int k = MathHelper.floor(this.locZ());
+            // this.setPositionRotation(d0, d1, d2, f1, f); // CraftBukkit - PlayerTeleportEvent handles position changes
+            // CraftBukkit start - PlayerPortalEvent implementation
+            Vec3D exitVelocity = Vec3D.a;
+            BlockPosition exitPosition = new BlockPosition(d0, d1, d2);
+            if (dimensionmanager.getType() == DimensionManager.THE_END) { // CraftBukkit - getType()
+                int i = exitPosition.getX();
+                int j = exitPosition.getY() - 1;
+                int k = exitPosition.getZ();
+                if (event.getCanCreatePortal()) {
+                // CraftBukkit end
                 boolean flag = true;
                 boolean flag1 = false;
+                org.bukkit.craftbukkit.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.util.BlockStateListPopulator(worldserver1); // CraftBukkit - Use BlockStateListPopulator
 
                 for (int l = -2; l <= 2; ++l) {
                     for (int i1 = -2; i1 <= 2; ++i1) {
@@ -566,23 +792,80 @@
                             int i2 = k + i1 * 0 - l * 1;
                             boolean flag2 = j1 < 0;
 
-                            worldserver1.setTypeUpdate(new BlockPosition(k1, l1, i2), flag2 ? Blocks.OBSIDIAN.getBlockData() : Blocks.AIR.getBlockData());
+                            blockList.setTypeAndData(new BlockPosition(k1, l1, i2), flag2 ? Blocks.OBSIDIAN.getBlockData() : Blocks.AIR.getBlockData(), 3); // CraftBukkit
                         }
                     }
                 }
 
-                this.setPositionRotation((double) i, (double) j, (double) k, f1, 0.0F);
-                this.setMot(Vec3D.a);
-            } else if (!worldserver1.getTravelAgent().findAndTeleport(this, f2)) {
-                worldserver1.getTravelAgent().createPortal(this);
-                worldserver1.getTravelAgent().findAndTeleport(this, f2);
+                // CraftBukkit start
+                org.bukkit.World bworld = worldserver1.getWorld();
+                org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, this.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+
+                this.world.getServer().getPluginManager().callEvent(portalEvent);
+                if (!portalEvent.isCancelled()) {
+                    blockList.updateList();
+                }
+                }
+                // handled below for PlayerTeleportEvent
+                // this.setPositionRotation((double) i, (double) j, (double) k, f1, 0.0F);
+                exit.setX(i);
+                exit.setY(j);
+                exit.setZ(k);
+                // this.setMot(Vec3D.a);
+                exitVelocity = Vec3D.a;
+            } else {
+                ShapeDetector.Shape portalShape = worldserver1.getTravelAgent().findAndTeleport(this, exitPosition, f2, event.getSearchRadius(), true);
+                if (portalShape == null && event.getCanCreatePortal()) {
+                    if (worldserver1.getTravelAgent().createPortal(this, exitPosition, event.getCreationRadius())) { // Only check for new portal if creation succeeded
+                        portalShape = worldserver1.getTravelAgent().findAndTeleport(this, exitPosition, f2, event.getSearchRadius(), true);
+                    }
+                }
+                // Check if portal was found
+                if (portalShape == null) {
+                    return null;
+                }
+                // Teleport handling - logic from PortalTravelAgent#findAndTeleport
+                exitVelocity = portalShape.velocity;
+                exit.setX(portalShape.position.getX());
+                exit.setY(portalShape.position.getY());
+                exit.setZ(portalShape.position.getZ());
+                exit.setYaw(f2 + (float) portalShape.yaw);
+                // CraftBukkit end
             }
 
             worldserver.getMethodProfiler().exit();
+            // CraftBukkit start - PlayerTeleportEvent
+            PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(this.getBukkitEntity(), enter, exit, cause);
+            Bukkit.getServer().getPluginManager().callEvent(tpEvent);
+            if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
+                return null;
+            }
+
+            exit = tpEvent.getTo();
+            if (exit == null) {
+                return null;
+            }
+            worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            this.worldChangeInvuln = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
+            dimensionmanager = worldserver1.getWorldProvider().getDimensionManager();
+
+            this.dimension = dimensionmanager;
+
+            this.playerConnection.sendPacket(new PacketPlayOutRespawn(worldserver1.worldProvider.getDimensionManager().getType(), WorldData.c(this.world.getWorldData().getSeed()), this.world.getWorldData().getType(), this.playerInteractManager.getGameMode()));
+            this.playerConnection.sendPacket(new PacketPlayOutServerDifficulty(this.world.getDifficulty(), this.world.getWorldData().isDifficultyLocked()));
+            PlayerList playerlist = this.server.getPlayerList();
+
+            playerlist.d(this);
+            worldserver.removePlayer(this);
+            this.dead = false;
+
+            this.setMot(exitVelocity);
+            // CraftBukkit end
             this.spawnIn(worldserver1);
             worldserver1.addPlayerPortal(this);
             this.triggerDimensionAdvancements(worldserver);
-            this.playerConnection.a(this.locX(), this.locY(), this.locZ(), f1, f);
+            this.playerConnection.teleport(exit); // CraftBukkit - use internal teleport without event
+            this.playerConnection.syncPosition(); // CraftBukkit - sync position after changing it (from PortalTravelAgent#findAndteleport)
             this.playerInteractManager.a(worldserver1);
             this.playerConnection.sendPacket(new PacketPlayOutAbilities(this.abilities));
             playerlist.a(this, worldserver1);
@@ -599,6 +882,11 @@
             this.lastSentExp = -1;
             this.lastHealthSent = -1.0F;
             this.lastFoodSent = -1;
+
+            // CraftBukkit start
+            PlayerChangedWorldEvent changeEvent = new PlayerChangedWorldEvent(this.getBukkitEntity(), worldserver.getWorld());
+            this.world.getServer().getPluginManager().callEvent(changeEvent);
+            // CraftBukkit end
             return this;
         }
     }
@@ -640,9 +928,16 @@
         this.activeContainer.c();
     }
 
-    @Override
+        @Override
     public Either<EntityHuman.EnumBedResult, Unit> sleep(BlockPosition blockposition) {
-        return super.sleep(blockposition).ifRight((unit) -> {
+        // CraftBukkit start - add force parameter
+        return this.sleep(blockposition, false);
+    }
+
+    @Override
+    public Either<EntityHuman.EnumBedResult, Unit> sleep(BlockPosition blockposition, boolean force) {
+        // CraftBukkit end
+        return super.sleep(blockposition, force).ifRight((unit) -> {
             this.a(StatisticList.SLEEP_IN_BED);
             CriterionTriggers.q.a(this);
         });
@@ -650,6 +945,7 @@
 
     @Override
     public void wakeup(boolean flag, boolean flag1) {
+        if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
         if (this.isSleeping()) {
             this.getWorldServer().getChunkProvider().broadcastIncludingSelf(this, new PacketPlayOutAnimation(this, 2));
         }
@@ -723,8 +1019,9 @@
         this.playerConnection.sendPacket(new PacketPlayOutOpenSignEditor(tileentitysign.getPosition()));
     }
 
-    public void nextContainerCounter() {
+    public int nextContainerCounter() { // CraftBukkit - void -> int
         this.containerCounter = this.containerCounter % 100 + 1;
+        return containerCounter; // CraftBukkit
     }
 
     @Override
@@ -739,6 +1036,24 @@
             this.nextContainerCounter();
             Container container = itileinventory.createMenu(this.containerCounter, this.inventory, this);
 
+            // CraftBukkit start - Inventory open hook
+            if (container != null) {
+                container.setTitle(itileinventory.getScoreboardDisplayName());
+
+                boolean cancelled = false;
+                container = CraftEventFactory.callInventoryOpenEvent(this, container, cancelled);
+                if (container == null && !cancelled) { // Let pre-cancelled events fall through
+                    // SPIGOT-5263 - close chest if cancelled
+                    if (itileinventory instanceof IInventory) {
+                        ((IInventory) itileinventory).closeContainer(this);
+                    } else if (itileinventory instanceof BlockChest.DoubleInventory) {
+                        // SPIGOT-5355 - double chests too :(
+                        ((BlockChest.DoubleInventory) itileinventory).inventorylargechest.closeContainer(this);
+                    }
+                    return OptionalInt.empty();
+                }
+            }
+            // CraftBukkit end
             if (container == null) {
                 if (this.isSpectator()) {
                     this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).a(EnumChatFormat.RED), true);
@@ -746,9 +1061,11 @@
 
                 return OptionalInt.empty();
             } else {
-                this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(container.windowId, container.getType(), itileinventory.getScoreboardDisplayName()));
-                container.addSlotListener(this);
+                // CraftBukkit start
                 this.activeContainer = container;
+                this.playerConnection.sendPacket(new PacketPlayOutOpenWindow(container.windowId, container.getType(), container.getTitle()));
+                // CraftBukkit end
+                container.addSlotListener(this);
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -761,13 +1078,24 @@
 
     @Override
     public void openHorseInventory(EntityHorseAbstract entityhorseabstract, IInventory iinventory) {
+        // CraftBukkit start - Inventory open hook
+        this.nextContainerCounter();
+        Container container = new ContainerHorse(this.containerCounter, this.inventory, iinventory, entityhorseabstract);
+        container.setTitle(entityhorseabstract.getScoreboardDisplayName());
+        container = CraftEventFactory.callInventoryOpenEvent(this, container);
+
+        if (container == null) {
+            iinventory.closeContainer(this);
+            return;
+        }
+        // CraftBukkit end
         if (this.activeContainer != this.defaultContainer) {
             this.closeInventory();
         }
 
-        this.nextContainerCounter();
+        // this.nextContainerCounter(); // CraftBukkit - moved up
         this.playerConnection.sendPacket(new PacketPlayOutOpenWindowHorse(this.containerCounter, iinventory.getSize(), entityhorseabstract.getId()));
-        this.activeContainer = new ContainerHorse(this.containerCounter, this.inventory, iinventory, entityhorseabstract);
+        this.activeContainer = container; // CraftBukkit
         this.activeContainer.addSlotListener(this);
     }
 
@@ -812,6 +1140,11 @@
     public void a(Container container, NonNullList<ItemStack> nonnulllist) {
         this.playerConnection.sendPacket(new PacketPlayOutWindowItems(container.windowId, nonnulllist));
         this.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.inventory.getCarried()));
+        // CraftBukkit start - Send a Set Slot to update the crafting result slot
+        if (java.util.EnumSet.of(InventoryType.CRAFTING,InventoryType.WORKBENCH).contains(container.getBukkitView().getType())) {
+            this.playerConnection.sendPacket(new PacketPlayOutSetSlot(container.windowId, 0, container.getSlot(0).getItem()));
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -821,6 +1154,7 @@
 
     @Override
     public void closeInventory() {
+        CraftEventFactory.handleInventoryCloseEvent(this); // CraftBukkit
         this.playerConnection.sendPacket(new PacketPlayOutCloseWindow(this.activeContainer.windowId));
         this.m();
     }
@@ -855,7 +1189,7 @@
     @Override
     public void a(Statistic<?> statistic, int i) {
         this.serverStatisticManager.b(this, statistic, i);
-        this.getScoreboard().getObjectivesForCriteria(statistic, this.getName(), (scoreboardscore) -> {
+        this.world.getServer().getScoreboardManager().getScoreboardScores(statistic, this.getName(), (scoreboardscore) -> { // CraftBukkit - Get our scores instead
             scoreboardscore.addScore(i);
         });
     }
@@ -863,7 +1197,7 @@
     @Override
     public void a(Statistic<?> statistic) {
         this.serverStatisticManager.setStatistic(this, statistic, 0);
-        this.getScoreboard().getObjectivesForCriteria(statistic, this.getName(), ScoreboardScore::c);
+        this.world.getServer().getScoreboardManager().getScoreboardScores(statistic, this.getName(), ScoreboardScore::c); // CraftBukkit - Get our scores instead
     }
 
     @Override
@@ -912,8 +1246,17 @@
 
     public void triggerHealthUpdate() {
         this.lastHealthSent = -1.0E8F;
+        this.lastSentExp = -1; // CraftBukkit - Added to reset
     }
 
+    // CraftBukkit start - Support multi-line messages
+    public void sendMessage(IChatBaseComponent[] ichatbasecomponent) {
+        for (IChatBaseComponent component : ichatbasecomponent) {
+            this.sendMessage(component);
+        }
+    }
+    // CraftBukkit end
+
     @Override
     public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {
         this.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent, flag ? ChatMessageType.GAME_INFO : ChatMessageType.CHAT));
@@ -967,12 +1310,14 @@
         this.lastSentExp = -1;
         this.lastHealthSent = -1.0F;
         this.lastFoodSent = -1;
-        this.recipeBook.a((RecipeBook) entityplayer.recipeBook);
+        // this.recipeBook.a((RecipeBook) entityplayer.recipeBook); // CraftBukkit
         this.removeQueue.addAll(entityplayer.removeQueue);
         this.cm = entityplayer.cm;
         this.cr = entityplayer.cr;
         this.setShoulderEntityLeft(entityplayer.getShoulderEntityLeft());
         this.setShoulderEntityRight(entityplayer.getShoulderEntityRight());
+
+        this.inLava = false; // SPIGOT-4767
     }
 
     @Override
@@ -1040,6 +1385,18 @@
 
     @Override
     public void a(EnumGamemode enumgamemode) {
+        // CraftBukkit start
+        if (enumgamemode == this.playerInteractManager.getGameMode()) {
+            return;
+        }
+
+        PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(getBukkitEntity(), GameMode.getByValue(enumgamemode.getId()));
+        world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
+
         this.playerInteractManager.setGameMode(enumgamemode);
         this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(3, (float) enumgamemode.getId()));
         if (enumgamemode == EnumGamemode.SPECTATOR) {
@@ -1090,6 +1447,17 @@
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
+        // CraftBukkit start
+        if (getMainHand() != packetplayinsettings.getMainHand()) {
+            PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT);
+            this.server.server.getPluginManager().callEvent(event);
+        }
+        if (!this.locale.equals(packetplayinsettings.b())) {
+            PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(getBukkitEntity(), packetplayinsettings.b());
+            this.server.server.getPluginManager().callEvent(event);
+        }
+        this.clientViewDistance = packetplayinsettings.viewDistance;
+        // CraftBukkit end
         this.locale = packetplayinsettings.b();
         this.ch = packetplayinsettings.d();
         this.ci = packetplayinsettings.e();
@@ -1126,13 +1494,13 @@
         if (entity instanceof EntityHuman) {
             this.playerConnection.sendPacket(new PacketPlayOutEntityDestroy(new int[]{entity.getId()}));
         } else {
-            this.removeQueue.add(entity.getId());
+            this.removeQueue.add((Integer) entity.getId()); // CraftBukkit - decompile error
         }
 
     }
 
     public void d(Entity entity) {
-        this.removeQueue.remove(entity.getId());
+        this.removeQueue.remove((Integer) entity.getId()); // CraftBukkit - decompile error
     }
 
     @Override
@@ -1156,7 +1524,7 @@
         this.spectatedEntity = (Entity) (entity == null ? this : entity);
         if (entity1 != this.spectatedEntity) {
             this.playerConnection.sendPacket(new PacketPlayOutCamera(this.spectatedEntity));
-            this.enderTeleportTo(this.spectatedEntity.locX(), this.spectatedEntity.locY(), this.spectatedEntity.locZ());
+            this.playerConnection.a(this.spectatedEntity.locX(), this.spectatedEntity.locY(), this.spectatedEntity.locZ(), this.yaw, this.pitch, TeleportCause.SPECTATE); // CraftBukkit
         }
 
     }
@@ -1185,7 +1553,7 @@
 
     @Nullable
     public IChatBaseComponent getPlayerListName() {
-        return null;
+        return listName; // CraftBukkit
     }
 
     @Override
@@ -1206,9 +1574,16 @@
         return this.advancementDataPlayer;
     }
 
+    // CraftBukkit start
     public void a(WorldServer worldserver, double d0, double d1, double d2, float f, float f1) {
+        this.a(worldserver, d0, d1, d2, f, f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public void a(WorldServer worldserver, double d0, double d1, double d2, float f, float f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        // CraftBukkit end
         this.setSpectatorTarget(this);
         this.stopRiding();
+        /* CraftBukkit start - replace with bukkit handling for multi-world
         if (worldserver == this.world) {
             this.playerConnection.a(d0, d1, d2, f, f1);
         } else {
@@ -1231,6 +1606,9 @@
             this.server.getPlayerList().a(this, worldserver);
             this.server.getPlayerList().updateClient(this);
         }
+        */
+        this.getBukkitEntity().teleport(new Location(worldserver.getWorld(), d0, d1, d2, f, f1), cause);
+        // CraftBukkit end
 
     }
 
@@ -1285,4 +1663,144 @@
             return entityitem;
         }
     }
 }
